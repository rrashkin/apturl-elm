''' apturl front end written in elementary '''
# !/usr/bin/python
# Written by: Jeff Hoogland
# Started: 05/07/2014

import sys
from efl.evas import EVAS_HINT_EXPAND, EVAS_HINT_FILL
from efl import elementary
from efl.elementary.window import StandardWindow
from efl.elementary.box import Box
from efl.elementary.button import Button
from efl.elementary.frame import Frame
from efl.elementary.label import Label, ELM_WRAP_WORD
from efl.elementary.progressbar import Progressbar
from efl.elementary.icon import Icon
from efl.elementary.innerwindow import InnerWindow
from efl.elementary.entry import Entry
from efl.elementary.flip import Flip, ELM_FLIP_ROTATE_YZ_CENTER_AXIS

from elmextensions import EmbeddedTerminal

import apt

EXPAND_BOTH = EVAS_HINT_EXPAND, EVAS_HINT_EXPAND
EXPAND_HORIZ = EVAS_HINT_EXPAND, 0.0
FILL_BOTH = EVAS_HINT_FILL, EVAS_HINT_FILL
FILL_HORIZ = EVAS_HINT_FILL, 0.5
ALIGN_CENTER = 0.5, 0.5

# pylint: disable=too-many-instance-attributes


class MainWin(StandardWindow):
    ''' instantiate window object '''
    def __init__(self, _app, package_name):
        self.package_name = package_name

        # create the main window
        StandardWindow.__init__(self, "apturl-elm",
                                "Bodhi Application Installer",
                                autodel=True, size=(500, 225))

        self.callback_delete_request_add(lambda o: elementary.exit())
        self._app = _app

        icon = Icon(self)
        icon.size_hint_weight_set(EVAS_HINT_EXPAND, EVAS_HINT_EXPAND)
        icon.size_hint_align_set(EVAS_HINT_FILL, EVAS_HINT_FILL)
        icon.standard_set('system-software-installer')
        icon.show()
        self.icon_object_set(icon.object_get())

        # build the two main boxes
        self.main_box = self.build_main_box()
        self.load_box = self.build_load_box()

        # build the information details inwin object
        self.build_details_win()

        # the flip object has the load screen on one
        # side and the GUI on the other
        self.flip = Flip(self, size_hint_weight=EXPAND_BOTH,
                         size_hint_align=FILL_BOTH)
        self.flip.part_content_set("front", self.main_box)
        self.flip.part_content_set("back", self.load_box)
        self.resize_object_add(self.flip)
        self.flip.show()

        self.center(True, True)

        # show the window
        self.show()

    def build_details_win(self):
        ''' window showing installation details '''
        self.update_term = EmbeddedTerminal(self,
                                            size_hint_weight=EXPAND_BOTH,
                                            size_hint_align=FILL_BOTH)
        self.update_term.show()

        closebtn = Button(self)
        closebtn.text_set("Done")
        closebtn.callback_pressed_add(self.inner_win_hide)
        closebtn.show()

        box = Box(self, size_hint_weight=EXPAND_BOTH,
                  size_hint_align=FILL_BOTH)
        box.pack_end(self.update_term)
        box.pack_end(closebtn)
        box.show()

        self.inner_win = InnerWindow(self, size_hint_weight=EXPAND_BOTH,
                                     size_hint_align=FILL_HORIZ)
        self.inner_win.content_set(box)

    def inner_win_show(self):
        ''' method to show interior window '''
        self.inner_win.show()
        self.inner_win.activate()

    def inner_win_hide(self):
        ''' method to hide interior window '''
        self.inner_win.hide()

    def build_load_box(self):
        ''' method to build the load box '''
        # build the load label
        load_label = Label(self, size_hint_weight=EXPAND_BOTH,
                           size_hint_align=FILL_HORIZ)
        load_label.text = "<b>Processing</b>"
        load_label.show()

        # build the spinning wheel
        wheel = Progressbar(self, pulse_mode=True,
                            size_hint_weight=EXPAND_BOTH,
                            size_hint_align=FILL_HORIZ)
        wheel.pulse(True)
        wheel.show()

        detailsbtn = Button(self, style="anchor")
        detailsbtn.text_set("Details")
        detailsbtn.callback_pressed_add(self.inner_win_show)
        detailsbtn.show()

        # build the status label
        self.status_label = Label(self, size_hint_weight=EXPAND_BOTH,
                                  size_hint_align=FILL_HORIZ)
        self.status_label.show()

        # put all the built objects in a vertical box
        box = Box(self, size_hint_weight=EXPAND_BOTH,
                  size_hint_align=FILL_BOTH)
        box.pack_end(load_label)
        box.pack_end(wheel)
        box.pack_end(self.status_label)
        box.pack_end(detailsbtn)
        box.show()

        return box

    def build_main_box(self):
        ''' method to build the primary box '''
        # build our toolbar
        self.label = Label(self, size_hint_weight=EXPAND_HORIZ,
                           size_hint_align=FILL_HORIZ)
        self.label.show()

        # build the label that shows the package's description
        self.current_description = Entry(self, editable=False, scrollable=True,
                                         size_hint_weight=EXPAND_BOTH,
                                         size_hint_align=FILL_BOTH)
        self.current_description.text = "Select a package for information"
        self.current_description.line_wrap_set(ELM_WRAP_WORD)
        self.current_description.show()

        self.des_frame = Frame(self, size_hint_weight=EXPAND_BOTH,
                               size_hint_align=FILL_BOTH)
        self.des_frame.text = "Description:"
        self.des_frame.content = self.current_description
        self.des_frame.show()

        self.icon = Icon(self, size_hint_weight=(0.25, 0.25),
                         size_hint_align=FILL_BOTH)
        valid_icon = self.icon.standard_set(self.package_name)
        if not valid_icon:
            self.icon.standard_set("system-software-installer")
        self.icon.show()

        self.des_box = Box(self, size_hint_weight=EXPAND_BOTH,
                           size_hint_align=FILL_BOTH)
        self.des_box.horizontal_set(True)
        self.des_box.show()

        self.des_box.pack_end(self.icon)
        self.des_box.pack_end(self.des_frame)

        self.button_box = Box(self, size_hint_weight=EXPAND_HORIZ,
                              size_hint_align=FILL_HORIZ)
        self.button_box.horizontal_set(True)
        self.button_box.show()

        self.install_button = Button(self, size_hint_weight=EXPAND_HORIZ,
                                     size_hint_align=FILL_HORIZ)
        self.install_button.text = "Install"
        self.install_button.callback_pressed_add(self.install_pressed)
        self.install_button.show()

        self.cancel_button = Button(self, size_hint_weight=EXPAND_HORIZ,
                                    size_hint_align=FILL_HORIZ)
        self.cancel_button.text = "Cancel"
        self.cancel_button.callback_pressed_add(lambda o: elementary.exit())
        self.cancel_button.show()

        self.button_box.pack_end(self.cancel_button)
        self.button_box.pack_end(self.install_button)

        # add all of our objects to the box
        box = Box(self, size_hint_weight=EXPAND_HORIZ,
                  size_hint_align=FILL_HORIZ)
        box.pack_end(self.label)
        box.pack_end(self.des_box)
        box.pack_end(self.button_box)
        box.show()

        return box

    def install_pressed(self):
        ''' callback for install button pressed '''
        self.status_label.text = "<i>Installing package...</i>"
        self.flip.go(ELM_FLIP_ROTATE_YZ_CENTER_AXIS)
        self.update_term.runCommand("apt-get -y install %s" %
                                    self.package_name, self.install_done)

    def set_package_info(self, package_desc):
        ''' method to display package information '''
        self.current_description.text = package_desc
        self.label.text = "Would you like to install\
                          <b>%s</b>?" % self.package_name
        self.des_frame.text = "Description:"
        valid_icon = self.icon.standard_set(self.package_name)
        if not valid_icon:
            self.icon.standard_set("system-software-installer")

    def install_done(self, already=False, notfound=False):
        ''' cleanup after installation complete '''
        self.des_frame.text = ""

        if not already and not notfound:
            self.flip.go(ELM_FLIP_ROTATE_YZ_CENTER_AXIS)
            self.label.text = "<b>Successful Package Installation!</b>"
            self.icon.standard_set("dialog-ok")
            self.current_description.text = "Package %s has been\
                                            successfully installed\
                                            on your computer. You can \
                                            close this window." % \
                                            self.package_name

            self.install_button.text = "Info"
            self.install_button.callback_pressed_del(self.install_pressed)
            self.install_button.callback_pressed_add(self.inner_win_show)
        elif already:
            self.label.text = "<b>Package Already installed!</b>"
            self.current_description.text = "It looks like package %s is already \
                                            installed on your computer." %\
                                            self.package_name
            self.install_button.delete()
        elif notfound:
            self.label.text = "<b>Package Not found!</b>"
            self.icon.standard_set("dialog-error")
            self.current_description.text = "Cannot locate package %s for\
                                            installation. If you have not\
                                            done so already, try \
                                            refreshing your package sources\
                                            using the button below." %\
                                            self.package_name
            self.install_button.text = "Refresh"
            self.install_button.callback_pressed_del(self.install_pressed)
            self.install_button.callback_pressed_add(self.refresh_pressed)

        self.cancel_button.text = "Close"

    def refresh_pressed(self):
        ''' callback after refresh button pressed '''
        self.cancel_button.text = "Cancel"
        self.install_button.text = "Install"
        self.install_button.callback_pressed_add(self.install_pressed)
        self.install_button.callback_pressed_del(self.refresh_pressed)
        self._app.refresh_packages()


class AptUrl(object):
    ''' main class for installation wrapper '''
    def __init__(self, package_name):
        self.package_name = package_name

        self.packages_to_update = {}
        self.apt = apt.cache.Cache()

        self.win = MainWin(self, self.package_name)

        self.package_object = None
        self.package_version = None

    def set_package_info(self):
        ''' build package info '''
        if self.package_name in self.apt:
            self.package_object = self.apt[self.package_name]
            self.package_version = self.apt[self.package_name].versions[0]
            package_desc = self.apt[self.package_name].versions[0].description
            if not self.package_object.is_installed:
                self.win.set_package_info(package_desc)
            else:
                self.win.install_done(already=True)
        else:
            self.win.install_done(notfound=True)

    def refresh_packages(self, flippy=True):
        ''' refresh package lists '''
        self.win.status_label.text = "<i>Refreshing package lists...</i>"
        if flippy:
            self.win.flip.go(ELM_FLIP_ROTATE_YZ_CENTER_AXIS)

        self.win.update_term.run_cmd("apt-get update",
                                     self.refresh_packages_done)

    def refresh_packages_done(self):
        ''' callback when refresh complete '''
        self.win.flip.go(ELM_FLIP_ROTATE_YZ_CENTER_AXIS)
        self.apt.open()
        self.set_package_info()


if __name__ == "__main__":
    elementary.init()

    ARGS = sys.argv[1]
    print(ARGS)

    PACKAGE = ARGS.split(":")[1]

    if PACKAGE.startswith("///"):
        PACKAGE = PACKAGE[3:]

    if "?" in PACKAGE:
        REFRESH = PACKAGE.split("?")[1]
        PACKAGE = PACKAGE.split("?")[0]

        REFRESH = bool("yep" in REFRESH)

    else:
        REFRESH = False

    # Always force a refresh to help users
    REFRESH = True

    print(PACKAGE)
    print(REFRESH)

    APP = AptUrl(PACKAGE)
    if REFRESH:
        APP.refresh_packages()
    else:
        APP.set_package_info()

    elementary.run()

    elementary.shutdown()
